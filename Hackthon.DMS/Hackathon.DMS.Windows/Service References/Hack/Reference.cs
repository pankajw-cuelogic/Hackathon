//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Hackathon.DMS.Windows.Hack {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Device", Namespace="http://schemas.datacontract.org/2004/07/Hackathon.DMS.API")]
    [System.SerializableAttribute()]
    public partial class Device : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> CreatedDatetimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DeviceIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DeviceIpField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DeviceNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DeviceStatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> IsDeletedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> IsPauseField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> IsShutdownDeviceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ScreenShotIntervalField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> UpdatedDatetimeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> CreatedDatetime {
            get {
                return this.CreatedDatetimeField;
            }
            set {
                if ((this.CreatedDatetimeField.Equals(value) != true)) {
                    this.CreatedDatetimeField = value;
                    this.RaisePropertyChanged("CreatedDatetime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DeviceId {
            get {
                return this.DeviceIdField;
            }
            set {
                if ((object.ReferenceEquals(this.DeviceIdField, value) != true)) {
                    this.DeviceIdField = value;
                    this.RaisePropertyChanged("DeviceId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DeviceIp {
            get {
                return this.DeviceIpField;
            }
            set {
                if ((object.ReferenceEquals(this.DeviceIpField, value) != true)) {
                    this.DeviceIpField = value;
                    this.RaisePropertyChanged("DeviceIp");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DeviceName {
            get {
                return this.DeviceNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DeviceNameField, value) != true)) {
                    this.DeviceNameField = value;
                    this.RaisePropertyChanged("DeviceName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DeviceStatus {
            get {
                return this.DeviceStatusField;
            }
            set {
                if ((object.ReferenceEquals(this.DeviceStatusField, value) != true)) {
                    this.DeviceStatusField = value;
                    this.RaisePropertyChanged("DeviceStatus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<bool> IsDeleted {
            get {
                return this.IsDeletedField;
            }
            set {
                if ((this.IsDeletedField.Equals(value) != true)) {
                    this.IsDeletedField = value;
                    this.RaisePropertyChanged("IsDeleted");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<bool> IsPause {
            get {
                return this.IsPauseField;
            }
            set {
                if ((this.IsPauseField.Equals(value) != true)) {
                    this.IsPauseField = value;
                    this.RaisePropertyChanged("IsPause");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<bool> IsShutdownDevice {
            get {
                return this.IsShutdownDeviceField;
            }
            set {
                if ((this.IsShutdownDeviceField.Equals(value) != true)) {
                    this.IsShutdownDeviceField = value;
                    this.RaisePropertyChanged("IsShutdownDevice");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ScreenShotInterval {
            get {
                return this.ScreenShotIntervalField;
            }
            set {
                if ((this.ScreenShotIntervalField.Equals(value) != true)) {
                    this.ScreenShotIntervalField = value;
                    this.RaisePropertyChanged("ScreenShotInterval");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> UpdatedDatetime {
            get {
                return this.UpdatedDatetimeField;
            }
            set {
                if ((this.UpdatedDatetimeField.Equals(value) != true)) {
                    this.UpdatedDatetimeField = value;
                    this.RaisePropertyChanged("UpdatedDatetime");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Screenshot", Namespace="http://schemas.datacontract.org/2004/07/Hackathon.DMS.API")]
    [System.SerializableAttribute()]
    public partial class Screenshot : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> CreatedDatetimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Fk_DeviceIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> IsDeletedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ScreenshotPathField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> CreatedDatetime {
            get {
                return this.CreatedDatetimeField;
            }
            set {
                if ((this.CreatedDatetimeField.Equals(value) != true)) {
                    this.CreatedDatetimeField = value;
                    this.RaisePropertyChanged("CreatedDatetime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Fk_DeviceId {
            get {
                return this.Fk_DeviceIdField;
            }
            set {
                if ((object.ReferenceEquals(this.Fk_DeviceIdField, value) != true)) {
                    this.Fk_DeviceIdField = value;
                    this.RaisePropertyChanged("Fk_DeviceId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<bool> IsDeleted {
            get {
                return this.IsDeletedField;
            }
            set {
                if ((this.IsDeletedField.Equals(value) != true)) {
                    this.IsDeletedField = value;
                    this.RaisePropertyChanged("IsDeleted");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ScreenshotPath {
            get {
                return this.ScreenshotPathField;
            }
            set {
                if ((object.ReferenceEquals(this.ScreenshotPathField, value) != true)) {
                    this.ScreenshotPathField = value;
                    this.RaisePropertyChanged("ScreenshotPath");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Test", Namespace="http://schemas.datacontract.org/2004/07/Hackathon.DMS.API")]
    [System.SerializableAttribute()]
    public partial class Test : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> CreatedDatetimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DeviceIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DeviceIpField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DeviceNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DeviceStatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> IsDeletedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> IsPauseField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> IsShutdownDeviceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ScreenShotIntervalField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> CreatedDatetime {
            get {
                return this.CreatedDatetimeField;
            }
            set {
                if ((this.CreatedDatetimeField.Equals(value) != true)) {
                    this.CreatedDatetimeField = value;
                    this.RaisePropertyChanged("CreatedDatetime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DeviceId {
            get {
                return this.DeviceIdField;
            }
            set {
                if ((object.ReferenceEquals(this.DeviceIdField, value) != true)) {
                    this.DeviceIdField = value;
                    this.RaisePropertyChanged("DeviceId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DeviceIp {
            get {
                return this.DeviceIpField;
            }
            set {
                if ((object.ReferenceEquals(this.DeviceIpField, value) != true)) {
                    this.DeviceIpField = value;
                    this.RaisePropertyChanged("DeviceIp");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DeviceName {
            get {
                return this.DeviceNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DeviceNameField, value) != true)) {
                    this.DeviceNameField = value;
                    this.RaisePropertyChanged("DeviceName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DeviceStatus {
            get {
                return this.DeviceStatusField;
            }
            set {
                if ((object.ReferenceEquals(this.DeviceStatusField, value) != true)) {
                    this.DeviceStatusField = value;
                    this.RaisePropertyChanged("DeviceStatus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<bool> IsDeleted {
            get {
                return this.IsDeletedField;
            }
            set {
                if ((this.IsDeletedField.Equals(value) != true)) {
                    this.IsDeletedField = value;
                    this.RaisePropertyChanged("IsDeleted");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<bool> IsPause {
            get {
                return this.IsPauseField;
            }
            set {
                if ((this.IsPauseField.Equals(value) != true)) {
                    this.IsPauseField = value;
                    this.RaisePropertyChanged("IsPause");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<bool> IsShutdownDevice {
            get {
                return this.IsShutdownDeviceField;
            }
            set {
                if ((this.IsShutdownDeviceField.Equals(value) != true)) {
                    this.IsShutdownDeviceField = value;
                    this.RaisePropertyChanged("IsShutdownDevice");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ScreenShotInterval {
            get {
                return this.ScreenShotIntervalField;
            }
            set {
                if ((this.ScreenShotIntervalField.Equals(value) != true)) {
                    this.ScreenShotIntervalField = value;
                    this.RaisePropertyChanged("ScreenShotInterval");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Hack.IHackathonService")]
    public interface IHackathonService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHackathonService/IsDeviceRegistered", ReplyAction="http://tempuri.org/IHackathonService/IsDeviceRegisteredResponse")]
        Hackathon.DMS.Windows.Hack.Device IsDeviceRegistered(Hackathon.DMS.Windows.Hack.Device DeviceDetails);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHackathonService/IsDeviceRegistered", ReplyAction="http://tempuri.org/IHackathonService/IsDeviceRegisteredResponse")]
        System.Threading.Tasks.Task<Hackathon.DMS.Windows.Hack.Device> IsDeviceRegisteredAsync(Hackathon.DMS.Windows.Hack.Device DeviceDetails);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHackathonService/SaveScreenshotPath", ReplyAction="http://tempuri.org/IHackathonService/SaveScreenshotPathResponse")]
        string SaveScreenshotPath(Hackathon.DMS.Windows.Hack.Screenshot UserDetDeviceDetailsails);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHackathonService/SaveScreenshotPath", ReplyAction="http://tempuri.org/IHackathonService/SaveScreenshotPathResponse")]
        System.Threading.Tasks.Task<string> SaveScreenshotPathAsync(Hackathon.DMS.Windows.Hack.Screenshot UserDetDeviceDetailsails);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHackathonService/IsPauseDevice", ReplyAction="http://tempuri.org/IHackathonService/IsPauseDeviceResponse")]
        string IsPauseDevice(Hackathon.DMS.Windows.Hack.Device DeviceDetails);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHackathonService/IsPauseDevice", ReplyAction="http://tempuri.org/IHackathonService/IsPauseDeviceResponse")]
        System.Threading.Tasks.Task<string> IsPauseDeviceAsync(Hackathon.DMS.Windows.Hack.Device DeviceDetails);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHackathonService/TestRequestGET", ReplyAction="http://tempuri.org/IHackathonService/TestRequestGETResponse")]
        string TestRequestGET();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHackathonService/TestRequestGET", ReplyAction="http://tempuri.org/IHackathonService/TestRequestGETResponse")]
        System.Threading.Tasks.Task<string> TestRequestGETAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHackathonService/TestRequestPOST", ReplyAction="http://tempuri.org/IHackathonService/TestRequestPOSTResponse")]
        string TestRequestPOST();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHackathonService/TestRequestPOST", ReplyAction="http://tempuri.org/IHackathonService/TestRequestPOSTResponse")]
        System.Threading.Tasks.Task<string> TestRequestPOSTAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHackathonService/TestRequestGETWithParameter", ReplyAction="http://tempuri.org/IHackathonService/TestRequestGETWithParameterResponse")]
        string TestRequestGETWithParameter(string DeviceDetails);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHackathonService/TestRequestGETWithParameter", ReplyAction="http://tempuri.org/IHackathonService/TestRequestGETWithParameterResponse")]
        System.Threading.Tasks.Task<string> TestRequestGETWithParameterAsync(string DeviceDetails);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHackathonService/TestRequestPOSTWithParameter", ReplyAction="http://tempuri.org/IHackathonService/TestRequestPOSTWithParameterResponse")]
        string TestRequestPOSTWithParameter(Hackathon.DMS.Windows.Hack.Test DeviceDetails);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHackathonService/TestRequestPOSTWithParameter", ReplyAction="http://tempuri.org/IHackathonService/TestRequestPOSTWithParameterResponse")]
        System.Threading.Tasks.Task<string> TestRequestPOSTWithParameterAsync(Hackathon.DMS.Windows.Hack.Test DeviceDetails);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IHackathonServiceChannel : Hackathon.DMS.Windows.Hack.IHackathonService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class HackathonServiceClient : System.ServiceModel.ClientBase<Hackathon.DMS.Windows.Hack.IHackathonService>, Hackathon.DMS.Windows.Hack.IHackathonService {
        
        public HackathonServiceClient() {
        }
        
        public HackathonServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public HackathonServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public HackathonServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public HackathonServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Hackathon.DMS.Windows.Hack.Device IsDeviceRegistered(Hackathon.DMS.Windows.Hack.Device DeviceDetails) {
            return base.Channel.IsDeviceRegistered(DeviceDetails);
        }
        
        public System.Threading.Tasks.Task<Hackathon.DMS.Windows.Hack.Device> IsDeviceRegisteredAsync(Hackathon.DMS.Windows.Hack.Device DeviceDetails) {
            return base.Channel.IsDeviceRegisteredAsync(DeviceDetails);
        }
        
        public string SaveScreenshotPath(Hackathon.DMS.Windows.Hack.Screenshot UserDetDeviceDetailsails) {
            return base.Channel.SaveScreenshotPath(UserDetDeviceDetailsails);
        }
        
        public System.Threading.Tasks.Task<string> SaveScreenshotPathAsync(Hackathon.DMS.Windows.Hack.Screenshot UserDetDeviceDetailsails) {
            return base.Channel.SaveScreenshotPathAsync(UserDetDeviceDetailsails);
        }
        
        public string IsPauseDevice(Hackathon.DMS.Windows.Hack.Device DeviceDetails) {
            return base.Channel.IsPauseDevice(DeviceDetails);
        }
        
        public System.Threading.Tasks.Task<string> IsPauseDeviceAsync(Hackathon.DMS.Windows.Hack.Device DeviceDetails) {
            return base.Channel.IsPauseDeviceAsync(DeviceDetails);
        }
        
        public string TestRequestGET() {
            return base.Channel.TestRequestGET();
        }
        
        public System.Threading.Tasks.Task<string> TestRequestGETAsync() {
            return base.Channel.TestRequestGETAsync();
        }
        
        public string TestRequestPOST() {
            return base.Channel.TestRequestPOST();
        }
        
        public System.Threading.Tasks.Task<string> TestRequestPOSTAsync() {
            return base.Channel.TestRequestPOSTAsync();
        }
        
        public string TestRequestGETWithParameter(string DeviceDetails) {
            return base.Channel.TestRequestGETWithParameter(DeviceDetails);
        }
        
        public System.Threading.Tasks.Task<string> TestRequestGETWithParameterAsync(string DeviceDetails) {
            return base.Channel.TestRequestGETWithParameterAsync(DeviceDetails);
        }
        
        public string TestRequestPOSTWithParameter(Hackathon.DMS.Windows.Hack.Test DeviceDetails) {
            return base.Channel.TestRequestPOSTWithParameter(DeviceDetails);
        }
        
        public System.Threading.Tasks.Task<string> TestRequestPOSTWithParameterAsync(Hackathon.DMS.Windows.Hack.Test DeviceDetails) {
            return base.Channel.TestRequestPOSTWithParameterAsync(DeviceDetails);
        }
    }
}
